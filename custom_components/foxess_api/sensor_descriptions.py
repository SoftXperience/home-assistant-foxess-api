from collections import defaultdict
from collections.abc import Callable
from dataclasses import dataclass
from typing import Any

from homeassistant.components.sensor import SensorEntityDescription, SensorDeviceClass, SensorStateClass
from homeassistant.const import UnitOfPower, PERCENTAGE, UnitOfEnergy, UnitOfElectricCurrent, UnitOfElectricPotential, \
    UnitOfTemperature, UnitOfFrequency


def round_if_numeric(value: Any, decimals: int):
    if type(value) in (int, float):
        return round(value, decimals)
    else:
        return value


@dataclass(frozen=True)
class FoxEssEntityDescription(SensorEntityDescription):
    variable: str | None = None
    state: Callable[[defaultdict], Any] | None = None
    process: Callable[[Any], Any] | None = lambda value: round_if_numeric(value, 3)
    realtime: bool = True


SENSORS: tuple[FoxEssEntityDescription, ...] = (
    # realtime-data entities
    FoxEssEntityDescription(
        key="last_update",
        name="Last update",
        icon="mdi:clock",
        device_class=SensorDeviceClass.TIMESTAMP,
        variable="",
        state=lambda data: data["last_update"],
        process=None
    ),
    FoxEssEntityDescription(
        key="pv_power",
        name="PV Power",
        icon="mdi:solar-power-variant",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="pvPower",
        state=lambda data: data["realtime"]["pvPower"],
    ),

    # start data of the different strings
    FoxEssEntityDescription(
        key="pv1_power",
        name="PV1 Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="pv1Power",
        state=lambda data: data["realtime"]["pv1Power"],
    ),
    FoxEssEntityDescription(
        key="pv1_volt",
        name="PV1 Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="pv1Volt",
        state=lambda data: data["realtime"]["pv1Volt"],
    ),
    FoxEssEntityDescription(
        key="pv1_current",
        name="PV1 Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="pv1Current",
        state=lambda data: data["realtime"]["pv1Current"],
    ),

    FoxEssEntityDescription(
        key="pv2_power",
        name="PV2 Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="pv2Power",
        state=lambda data: data["realtime"]["pv2Power"],
    ),
    FoxEssEntityDescription(
        key="pv2_volt",
        name="PV2 Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="pv2Volt",
        state=lambda data: data["realtime"]["pv2Volt"],
    ),
    FoxEssEntityDescription(
        key="pv2_current",
        name="PV2 Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="pv2Current",
        state=lambda data: data["realtime"]["pv2Current"],
    ),

    FoxEssEntityDescription(
        key="pv3_power",
        name="PV3 Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="pv3Power",
        state=lambda data: data["realtime"]["pv3Power"],
    ),
    FoxEssEntityDescription(
        key="pv3_volt",
        name="PV3 Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="pv3Volt",
        state=lambda data: data["realtime"]["pv3Volt"],
    ),
    FoxEssEntityDescription(
        key="pv3_current",
        name="PV3 Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="pv3Current",
        state=lambda data: data["realtime"]["pv3Current"],
    ),

    FoxEssEntityDescription(
        key="pv4_power",
        name="PV4 Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="pv4Power",
        state=lambda data: data["realtime"]["pv4Power"],
    ),
    FoxEssEntityDescription(
        key="pv4_volt",
        name="PV4 Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="pv4Volt",
        state=lambda data: data["realtime"]["pv4Volt"],
    ),
    FoxEssEntityDescription(
        key="pv4_current",
        name="PV4 Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="pv4Current",
        state=lambda data: data["realtime"]["pv4Current"],
    ),
    # can go up to 18 strings...
    # end data of the different strings

    # start of eps data
    FoxEssEntityDescription(
        key="eps_power",
        name="EPS Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="epsPower",
        state=lambda data: data["realtime"]["epsPower"],
    ),
    FoxEssEntityDescription(
        key="eps_r_power",
        name="EPS R Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="epsPowerR",
        state=lambda data: data["realtime"]["epsPowerR"],
    ),
    FoxEssEntityDescription(
        key="eps_s_power",
        name="EPS S Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="epsPowerS",
        state=lambda data: data["realtime"]["epsPowerS"],
    ),
    FoxEssEntityDescription(
        key="eps_t_power",
        name="EPS T Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="epsPowerT",
        state=lambda data: data["realtime"]["epsPowerT"],
    ),

    FoxEssEntityDescription(
        key="eps_r_current",
        name="EPS R Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="epsCurrentR",
        state=lambda data: data["realtime"]["epsCurrentR"],
    ),
    FoxEssEntityDescription(
        key="eps_s_current",
        name="EPS S Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="epsCurrentS",
        state=lambda data: data["realtime"]["epsCurrentS"],
    ),
    FoxEssEntityDescription(
        key="eps_t_current",
        name="EPS T Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="epsCurrentT",
        state=lambda data: data["realtime"]["epsCurrentT"],
    ),

    FoxEssEntityDescription(
        key="eps_r_volt",
        name="EPS R Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="epsVoltR",
        state=lambda data: data["realtime"]["epsVoltR"],
    ),
    FoxEssEntityDescription(
        key="eps_s_volt",
        name="EPS S Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="epsVoltS",
        state=lambda data: data["realtime"]["epsVoltS"],
    ),
    FoxEssEntityDescription(
        key="eps_t_volt",
        name="EPS T Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="epsVoltT",
        state=lambda data: data["realtime"]["epsVoltT"],
    ),
    # end of eps data

    # start of currents
    FoxEssEntityDescription(
        key="r_current",
        name="R Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="RCurrent",
        state=lambda data: data["realtime"]["RCurrent"],
    ),
    FoxEssEntityDescription(
        key="s_current",
        name="S Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="SCurrent",
        state=lambda data: data["realtime"]["SCurrent"],
    ),
    FoxEssEntityDescription(
        key="t_current",
        name="T Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="TCurrent",
        state=lambda data: data["realtime"]["TCurrent"],
    ),
    # end of currents

    # start of volts
    FoxEssEntityDescription(
        key="r_volt",
        name="R Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="RVolt",
        state=lambda data: data["realtime"]["RVolt"],
    ),
    FoxEssEntityDescription(
        key="s_volt",
        name="S Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="SVolt",
        state=lambda data: data["realtime"]["SVolt"],
    ),
    FoxEssEntityDescription(
        key="t_volt",
        name="T Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="TVolt",
        state=lambda data: data["realtime"]["TVolt"],
    ),
    # end of volts

    # start of powers
    FoxEssEntityDescription(
        key="r_power",
        name="R Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="RPower",
        state=lambda data: data["realtime"]["RPower"],
    ),
    FoxEssEntityDescription(
        key="s_power",
        name="S Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="SPower",
        state=lambda data: data["realtime"]["SPower"],
    ),
    FoxEssEntityDescription(
        key="t_power",
        name="T Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="TPower",
        state=lambda data: data["realtime"]["TPower"],
    ),
    # end of powers

    # start of load powers
    FoxEssEntityDescription(
        key="loads_power",
        name="Load Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="loadsPower",
        state=lambda data: data["realtime"]["loadsPower"],
    ),
    FoxEssEntityDescription(
        key="loads_r_power",
        name="Load R Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="loadsPowerR",
        state=lambda data: data["realtime"]["loadsPowerR"],
    ),
    FoxEssEntityDescription(
        key="loads_s_power",
        name="Load S Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="loadsPowerS",
        state=lambda data: data["realtime"]["loadsPowerS"],
    ),
    FoxEssEntityDescription(
        key="loads_t_power",
        name="Load T Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="loadsPowerT",
        state=lambda data: data["realtime"]["loadsPowerT"],
    ),
    # end of load powers

    FoxEssEntityDescription(
        key="generation_power",
        name="Output Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="generationPower",
        state=lambda data: data["realtime"]["generationPower"],
    ),
    FoxEssEntityDescription(
        key="feedin_power",
        name="Feed-in Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="feedinPower",
        state=lambda data: data["realtime"]["feedinPower"],
    ),
    FoxEssEntityDescription(
        key="grid_consumption_power",
        name="Grid Consumption Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="gridConsumptionPower",
        state=lambda data: data["realtime"]["gridConsumptionPower"],
    ),

    # start of battery
    FoxEssEntityDescription(
        key="inv_bat_power",
        name="Inv Battery Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="invBatPower",
        state=lambda data: data["realtime"]["invBatPower"],
    ),
    FoxEssEntityDescription(
        key="bat_charge_power",
        name="Battery Charge Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="batChargePower",
        state=lambda data: data["realtime"]["batChargePower"],
    ),
    FoxEssEntityDescription(
        key="bat_discharge_power",
        name="Battery Discharge Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="batDischargePower",
        state=lambda data: data["realtime"]["batDischargePower"],
    ),
    FoxEssEntityDescription(
        key="bat_volt",
        name="Battery Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="batVolt",
        state=lambda data: data["realtime"]["batVolt"],
    ),
    FoxEssEntityDescription(
        key="inv_bat_volt",
        name="Inv Battery Volt",
        icon="mdi:cosine-wave",
        device_class=SensorDeviceClass.VOLTAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricPotential.VOLT,
        variable="invBatVolt",
        state=lambda data: data["realtime"]["invBatVolt"],
    ),
    FoxEssEntityDescription(
        key="bat_current",
        name="Battery Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="batCurrent",
        state=lambda data: data["realtime"]["batCurrent"],
    ),
    FoxEssEntityDescription(
        key="inv_bat_current",
        name="Inv Battery Current",
        icon="mdi:current-ac",
        device_class=SensorDeviceClass.CURRENT,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfElectricCurrent.AMPERE,
        variable="invBatCurrent",
        state=lambda data: data["realtime"]["invBatCurrent"],
    ),
    # end of battery

    FoxEssEntityDescription(
        key="generation",
        name="Cumulative power generation",
        icon="mdi:solar-power-variant",
        device_class=SensorDeviceClass.ENERGY,
        state_class=SensorStateClass.TOTAL_INCREASING,
        native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
        variable="generation",
        state=lambda data: data["realtime"]["generation"],
    ),

    # start of temperatures
    FoxEssEntityDescription(
        key="bat_temperature",
        name="Battery Temperature",
        icon="mdi:thermometer",
        device_class=SensorDeviceClass.TEMPERATURE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfTemperature.CELSIUS,
        variable="batTemperature",
        state=lambda data: data["realtime"]["batTemperature"],
        process=lambda value: round_if_numeric(value, 1),
    ),
    FoxEssEntityDescription(
        key="ambient_temperature",
        name="Ambient Temperature",
        icon="mdi:thermometer",
        device_class=SensorDeviceClass.TEMPERATURE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfTemperature.CELSIUS,
        variable="ambientTemperation",
        state=lambda data: data["realtime"]["ambientTemperation"],
        process=lambda value: round_if_numeric(value, 1),
    ),
    FoxEssEntityDescription(
        key="inv_temperature",
        name="Inv Temperature",
        icon="mdi:thermometer",
        device_class=SensorDeviceClass.TEMPERATURE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfTemperature.CELSIUS,
        variable="invTemperation",
        state=lambda data: data["realtime"]["invTemperation"],
        process=lambda value: round_if_numeric(value, 1),
    ),
    FoxEssEntityDescription(
        key="boost_temperature",
        name="Boost Temperature",
        icon="mdi:thermometer",
        device_class=SensorDeviceClass.TEMPERATURE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfTemperature.CELSIUS,
        variable="boostTemperation",
        state=lambda data: data["realtime"]["boostTemperation"],
        process=lambda value: round_if_numeric(value, 1),
    ),
    FoxEssEntityDescription(
        key="charge_temperature",
        name="Charge Temperature",
        icon="mdi:thermometer",
        device_class=SensorDeviceClass.TEMPERATURE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfTemperature.CELSIUS,
        variable="chargeTemperature",
        state=lambda data: data["realtime"]["chargeTemperature"],
        process=lambda value: round_if_numeric(value, 1),
    ),
    FoxEssEntityDescription(
        key="dsp_temperature",
        name="DSP Temperature",
        icon="mdi:thermometer",
        device_class=SensorDeviceClass.TEMPERATURE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfTemperature.CELSIUS,
        variable="dspTemperature",
        state=lambda data: data["realtime"]["dspTemperature"],
        process=lambda value: round_if_numeric(value, 1),
    ),
    # end of temperatures

    # start of frequencies
    FoxEssEntityDescription(
        key="r_frequency",
        name="R Frequency",
        icon="mdi:sine-wave",
        device_class=SensorDeviceClass.FREQUENCY,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfFrequency.HERTZ,
        variable="RFreq",
        state=lambda data: data["realtime"]["RFreq"],
        process=lambda value: round_if_numeric(value, 1),
    ),
    FoxEssEntityDescription(
        key="s_frequency",
        name="S Frequency",
        icon="mdi:sine-wave",
        device_class=SensorDeviceClass.FREQUENCY,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfFrequency.HERTZ,
        variable="SFreq",
        state=lambda data: data["realtime"]["SFreq"],
        process=lambda value: round_if_numeric(value, 1),
    ),
    FoxEssEntityDescription(
        key="t_frequency",
        name="T Frequency",
        icon="mdi:sine-wave",
        device_class=SensorDeviceClass.FREQUENCY,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfFrequency.HERTZ,
        variable="TFreq",
        state=lambda data: data["realtime"]["TFreq"],
        process=lambda value: round_if_numeric(value, 1),
    ),
    # end of frequencies

    # start of meter power
    FoxEssEntityDescription(
        key="meter_power",
        name="Meter Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="meterPower",
        state=lambda data: data["realtime"]["meterPower"],
    ),
    FoxEssEntityDescription(
        key="meter_2_power",
        name="Meter 2 Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="meterPower2",
        state=lambda data: data["realtime"]["meterPower2"],
    ),
    FoxEssEntityDescription(
        key="meter_r_power",
        name="Meter R Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="meterPowerR",
        state=lambda data: data["realtime"]["meterPowerR"],
    ),
    FoxEssEntityDescription(
        key="meter_s_power",
        name="Meter S Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="meterPowerS",
        state=lambda data: data["realtime"]["meterPowerS"],
    ),
    FoxEssEntityDescription(
        key="meter_t_power",
        name="Meter T Power",
        icon="mdi:lightning-bolt",
        device_class=SensorDeviceClass.POWER,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfPower.KILO_WATT,
        variable="meterPowerT",
        state=lambda data: data["realtime"]["meterPowerT"],
    ),
    # end of meter power

    FoxEssEntityDescription(
        key="soc",
        name="SoC",
        icon="mdi:home-battery-outline",
        device_class=SensorDeviceClass.BATTERY,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=PERCENTAGE,
        variable="SoC",
        state=lambda data: data["realtime"]["SoC"],
        process=lambda value: round_if_numeric(value, 0),
    ),
    FoxEssEntityDescription(
        key="residual_energy",
        name="Residual Energy",
        icon="mdi:home-battery-outline",
        device_class=SensorDeviceClass.ENERGY_STORAGE,
        state_class=SensorStateClass.MEASUREMENT,
        native_unit_of_measurement=UnitOfEnergy.WATT_HOUR,
        suggested_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
        variable="ResidualEnergy",
        state=lambda data: data["realtime"]["ResidualEnergy"] * 10,
    ),

    # start report-data entities
    FoxEssEntityDescription(
        key="daily_generation",
        name="Daily generated energy",
        icon="mdi:solar-power-variant",
        device_class=SensorDeviceClass.ENERGY,
        state_class=SensorStateClass.TOTAL_INCREASING,
        native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
        variable="generation",
        state=lambda data: data["report"]["generation"],
        realtime=False
    ),
    FoxEssEntityDescription(
        key="daily_feedin",
        name="Daily feedin energy",
        icon="mdi:transmission-tower-import",
        device_class=SensorDeviceClass.ENERGY,
        state_class=SensorStateClass.TOTAL_INCREASING,
        native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
        variable="feedin",
        state=lambda data: data["report"]["feedin"],
        realtime=False
    ),
    FoxEssEntityDescription(
        key="daily_grid_consumption",
        name="Daily grid consumption energy",
        icon="mdi:transmission-tower-export",
        device_class=SensorDeviceClass.ENERGY,
        state_class=SensorStateClass.TOTAL_INCREASING,
        native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
        variable="gridConsumption",
        state=lambda data: data["report"]["gridConsumption"],
        realtime=False
    ),
    FoxEssEntityDescription(
        key="charged_energy_total",
        name="Daily Charged Energy Total",
        icon="mdi:battery-plus-outline",
        device_class=SensorDeviceClass.ENERGY,
        state_class=SensorStateClass.TOTAL_INCREASING,
        native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
        variable="chargeEnergyToTal",
        state=lambda data: data["report"]["chargeEnergyToTal"],
        realtime=False
    ),
    FoxEssEntityDescription(
        key="discharged_energy_total",
        name="Daily Discharged Energy Total",
        icon="mdi:battery-minus-outline",
        device_class=SensorDeviceClass.ENERGY,
        state_class=SensorStateClass.TOTAL_INCREASING,
        native_unit_of_measurement=UnitOfEnergy.KILO_WATT_HOUR,
        variable="dischargeEnergyToTal",
        state=lambda data: data["report"]["dischargeEnergyToTal"],
        realtime=False
    ),
    # end report-data entities
)
